import { redis } from "@/db/redis/client";
import dotenv from "dotenv";
import { createClient } from "@/db/supabase/server";
import pool from "@/db/postgres/client";
import { ProductType } from "@/types";

dotenv.config();

const LOCAL_MODE = process.env.LOCAL_MODE === "true";
const REDIS_KEY_ALL = "products:all";
const CACHE_TTL = 60 * 60; // 1 –≥–æ–¥–∏–Ω–∞

// üîÅ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø—Ä–æ–¥—É–∫—Ç–∏ –∑ PostgreSQL
async function fetchAllProductsFromDB(): Promise<ProductType[]> {
  let data: ProductType[] = [];

  if (!LOCAL_MODE) {
    console.log("üü¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è Supabase RPC");

    const supabase = await createClient();

    const { data: rpcData, error} = await supabase.rpc("get_all_products");

    if (error || !rpcData) {
      console.error("üî¥ RPC –ø–æ–º–∏–ª–∫–∞:", error?.message);
      return [];
    }
    data = rpcData;
  }
  else {
    console.log("üß© –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—îz—Ç—å—Å—è –ª–æ–∫–∞–ª—å–Ω–∏–π Postgres —á–µ—Ä–µ–∑ Pool");
    const result = await pool.query("SELECT * FROM public.get_all_products();");
    data = result.rows;
  }

  // –ö–µ—à—É–≤–∞–Ω–Ω—è –≤ Redis
  await redis.set(REDIS_KEY_ALL, JSON.stringify(data), "EX", CACHE_TTL);
  console.log(`üß© ${JSON.stringify(data)}`);
  return data;
}

// üß† –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø—Ä–æ–¥—É–∫—Ç–∏ –∑ Redis –∞–±–æ –ë–î (—è–∫—â–æ Redis –ø–æ—Ä–æ–∂–Ω—ñ–π)
export async function getAllProducts(): Promise<ProductType[]> {
  try {
    const cached = await redis.get(REDIS_KEY_ALL);

    if (cached) {
      const products = JSON.parse(cached);
      return products;
    }
  } catch (err) {
    console.warn("‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ –ø–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É:", err);
  }

  // Redis –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π
  return await fetchAllProductsFromDB();
}

export async function getProductById(id: string): Promise<ProductType  | null> {
  const products = await getAllProducts();
  return products.find((p) => p.id.toString() === id) || null;
}

export async function getProductsByCategory(
  category: string
): Promise<ProductType[]> {
  const products = await getAllProducts();
  const filtered = products.filter((p) => p.category === category);
  return filtered;
}

// üß† –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–º–∞–∫–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é
export async function getFlavoursByCategory(category: string) {
  const products = await getProductsByCategory(category);
  const flavours: { id: string; flavour: string }[] = [];
  const seen = new Set<string>();

  for (const product of products) {
    const flavour = product.flavour;
    if (flavour && !seen.has(flavour)) {
      seen.add(flavour);
      flavours.push({ id: product.id.toString(), flavour });
    }
  }
  return flavours;
}
