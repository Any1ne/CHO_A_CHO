import axiosInstance from "@/lib/axios";
import { ProductType, OrderSummary } from "@/types";
import { toast } from "sonner";
import { AppDispatch } from "@/store";
import { clearBasket } from "@/store/slices/basketSlice";
import { resetCheckout } from "@/store/slices/checkoutSlice";
import { AppRouterInstance } from "next/dist/shared/lib/app-router-context.shared-runtime";
import axios from "axios";

// –ü—Ä–æ–¥—É–∫—Ç–∏
export async function fetchProducts(category?: string): Promise<ProductType[]> {
  try {
    const res = await axiosInstance.get("/products", {
      params: category && category !== "All" ? { category } : {},
    });
    return res.data;
  } catch (error) {
    console.error("üî¥ fetchProducts error:", error);
    throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏");
  }
}

export async function fetchProductById(id: string): Promise<ProductType> {
  try {
    const res = await axiosInstance.get(`/products/${id}`);
    return res.data;
  } catch (error) {
    console.error("üî¥ fetchProductById error:", error);
    throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç");
  }
}

export async function fetchFlavoursByCategory(category: string): Promise<{ id: string; flavour: string }[]> {
  try {
    const res = await axiosInstance.get(`/products/flavours/${encodeURIComponent(category)}`);
    return res.data;
  } catch (error) {
    console.error("üî¥ fetchFlavoursByCategory error:", error);
    throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–º–∞–∫–∏");
  }
}

// –°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
export async function fetchOrderStatus(orderId: string): Promise<{
  isPaid: boolean;
  orderData: OrderSummary | null;
}> {
  try {
    const res = await axiosInstance.get("/orders", { params: { orderId } });

    console.log("--fetchOrderStatus --", res)
    if (!res.data.success || !res.data.order) {
      return {
        isPaid: false,
        orderData: null,
      };
    }

    return {
      isPaid: res.data.order.status === "paid",
      orderData: res.data.order,
    };
  } catch (error) {
    console.error("üî¥ fetchOrderStatus error:", error);
    return {
      isPaid: false,
      orderData: null,
    };
  }
}

// –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –ë–î
export async function submitOrder(order: OrderSummary) {
  try {
    const res = await axiosInstance.post("/orders", order);
    return res.data;
  } catch (error: unknown) {
    if (axios.isAxiosError(error)) {
      throw new Error(error.response?.data?.error || "–ü–æ–º–∏–ª–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è");
    }
    throw new Error("–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è");
  }
}


// Nova Poshta
export async function fetchCities() {
  try {
    const res = await axiosInstance.get("/delivery/nova-poshta/cities");
    return res.data.cities;
  } catch (error) {
    console.error("üî¥ fetchCities error:", error);
    throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º—ñ—Å—Ç–∞");
  }
}

export async function fetchWarehouses(cityRef: string) {
  try {
    const res = await axiosInstance.get("/delivery/nova-poshta/warehouses", {
      params: { cityRef },
    });
    return res.data.warehouses;
  } catch (error) {
    console.error("üî¥ fetchWarehouses error:", error);
    throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è");
  }
}

export async function fetchStreets(cityRef: string) {
  try {
    const res = await axiosInstance.get("/delivery/nova-poshta/streets", {
      params: { cityRef },
    });
    return res.data.streets;
  } catch (error) {
    console.error("üî¥ fetchStreets error:", error);
    throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—É–ª–∏—Ü—ñ");
  }
}

// –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —Ñ–æ—Ä–º–∞
export async function sendContactRequest(data: { name: string; email: string; message: string }) {
  try {
    const res = await axiosInstance.post("/contact", data);
    return res.data;
  } catch (error: unknown) {
  if (axios.isAxiosError(error)) {
    throw new Error(error.response?.data?.error || "–ü–æ–º–∏–ª–∫–∞ ...");
  }
  throw new Error("–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ ...");
}

}

// Redis ‚Äî –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
export async function saveRedisOrderToServer(orderData: OrderSummary) {
  try {
    const res = await axiosInstance.post("/orders/redis-order", {
      orderData,
      status: orderData.status,
    });
    return res.data;
  } catch (error) {
    console.error("üî¥ saveRedisOrderToServer error:", error);
    throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É Redis");
  }
}

// Redis ‚Äî –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
export async function fetchRedisOrder(orderId: string): Promise<OrderSummary> {
  try {
    const res = await axiosInstance.get("/orders/redis-order", {
      params: { orderId },
    });
    return res.data.orderData;
  } catch (error) {
    console.error("üî¥ fetchRedisOrder error:", error);
    throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ Redis");
  }
}

//Check Invoice - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –æ–ø–ª–∞—Ç–∏
export const checkInvoiceStatus = async (invoiceId: string) => {
  const apiToken = process.env.MONOBANK_API_TOKEN;
  const response = await fetch(
    `https://api.monobank.ua/api/merchant/invoice/status?invoiceId=${invoiceId}`,
    {
      headers: {
        "X-Token": apiToken!,
      },
    }
  );

  console.log("--STATUS--", response.json);
  if (!response.ok) {
    throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂—É");
  }

  return await response.json(); // –±—É–¥–µ –æ–± º—î–∫—Ç –∑ –ø–æ–ª–µ–º `status`
};

export const confirmOrderOnServer = async (orderId: string) => {
  try {
    const response = await axiosInstance.post(`/orders/confirm?orderId=${orderId}`);
    return response.data;
  } catch (error: unknown) {
  if (axios.isAxiosError(error)) {
    throw new Error(error.response?.data?.error || "–ü–æ–º–∏–ª–∫–∞ ...");
  }
  throw new Error("–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ ...");
}

};

export const handleOrderConfirmation = async (
  orderId: string,
  dispatch: AppDispatch,
  router: AppRouterInstance
) => {
  const result = await confirmOrderOnServer(orderId);

  if (result?.success || result?.alreadyExists) {
    dispatch(clearBasket());
    dispatch(resetCheckout());
    toast.success("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!");
    router.replace(`/checkout/success?orderId=${orderId}`);
  } else {
    toast.error(result?.error || "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.");
    router.replace("/");
  }
};
