import { NextRequest, NextResponse } from "next/server";
import { getRedisOrder } from "@/lib/redisOrder";
import { fetchOrderStatus, submitOrder, checkInvoiceStatus } from "@/lib/api";
import { OrderSummary } from "@/types";

export async function POST(req: NextRequest) {
  try {
    const orderId = req.nextUrl.searchParams.get("orderId");

    if (!orderId) {
      console.warn("[CONFIRM ORDER] ‚ùå Missing orderId in query");
      return NextResponse.json({ error: "Missing orderId" }, { status: 400 });
    }

    console.log(`[CONFIRM ORDER] ‚ñ∂Ô∏è –ü–æ—á–∞—Ç–æ–∫ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${orderId}`);

    // 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —á–∏ —ñ—Å–Ω—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –±–∞–∑—ñ
    const dbResult = await fetchOrderStatus(orderId);
    console.log("[CONFIRM ORDER] üîç –†–µ–∑—É–ª—å—Ç–∞—Ç fetchOrderStatus:", dbResult);

    if (dbResult?.orderData) {
      console.log("[CONFIRM ORDER] ‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ —ñ—Å–Ω—É—î –≤ –±–∞–∑—ñ");
      return NextResponse.json({ alreadyExists: true, orderId }, { status: 200 });
    }

    // 2. –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ Redis
    const redisOrderData = await getRedisOrder(orderId);
    console.log("[CONFIRM ORDER] üì¶ –î–∞–Ω—ñ –∑ Redis:", redisOrderData);

    if (!redisOrderData) {
      console.warn("[CONFIRM ORDER] ‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ Redis");
      return NextResponse.json({ error: "Order not found in Redis" }, { status: 404 });
    }

    const { checkoutSummary, items, total } = redisOrderData;

    // 3. –û–±—Ä–æ–±–∫–∞ Monobank-–æ–ø–ª–∞—Ç–∏
    if (checkoutSummary?.paymentInfo?.paymentMethod === "monobank") {
      const invoiceId = checkoutSummary.paymentInfo.invoiceId;
      if (!invoiceId) {
        console.warn("[CONFIRM ORDER] ‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π invoiceId –¥–ª—è Monobank");
        return NextResponse.json({ error: "Missing invoiceId for Monobank" }, { status: 400 });
      }

      const invoiceStatus = await checkInvoiceStatus(invoiceId);
      console.log("[CONFIRM ORDER] üè¶ –°—Ç–∞—Ç—É—Å —ñ–Ω–≤–æ–π—Å—É Monobank:", invoiceStatus);

      if (invoiceStatus.status !== "success") {
        console.warn("[CONFIRM ORDER] ‚ùå –Ü–Ω–≤–æ–π—Å –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ");
        return NextResponse.json({ error: "Invoice not paid" }, { status: 402 });
      }
    }

    // 4. –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    const finalOrder: OrderSummary = {
      orderId,
      checkoutSummary,
      items,
      total,
      status:
        checkoutSummary.paymentInfo?.paymentMethod === "monobank"
          ? "confirmed"
          : "–Ω–æ–≤–µ",
    };
    console.log("[CONFIRM ORDER] üìù –ì–æ—Ç–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:", finalOrder);

    // 5. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö 
    const dbInsertResult = await submitOrder(finalOrder);
    console.log("[CONFIRM ORDER] üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É:", dbInsertResult);

    if (!dbInsertResult?.OrderNumber) {
      console.error("[CONFIRM ORDER] ‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –±–∞–∑—É");
      return NextResponse.json({ error: "Failed to save order in DB" }, { status: 500 });
    }

    console.log(`[CONFIRM ORDER] ‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${orderId}`);
    return NextResponse.json({ success: true, orderId }, { status: 200 });

  } catch (err) {
    console.error("[CONFIRM ORDER] ‚ùó –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", err);
    return NextResponse.json({ error: "Internal server error" }, { status: 500 });
  }
}
